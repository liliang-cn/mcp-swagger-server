{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Local Petstore API",
    "description": "A simple local Petstore API for testing MCP Swagger Server",
    "contact": {
      "name": "Local Development"
    }
  },
  "host": "localhost:4538",
  "basePath": "/v2",
  "schemes": ["http"],
  "paths": {
    "/pets": {
      "get": {
        "operationId": "listPets",
        "summary": "List all pets",
        "description": "Returns a list of all pets in the store with optional filtering",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 100
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of pets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          }
        },
        "tags": ["pets"]
      },
      "post": {
        "operationId": "createPet",
        "summary": "Create a pet",
        "description": "Create a new pet in the store",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Pet to add to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewPet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pet created",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "tags": ["pets"]
      }
    },
    "/pets/{petId}": {
      "get": {
        "operationId": "getPetById",
        "summary": "Get a pet by ID",
        "description": "Returns a single pet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "The id of the pet to retrieve",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "tags": ["pets"]
      },
      "put": {
        "operationId": "updatePet",
        "summary": "Update a pet",
        "description": "Update an existing pet by ID",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "The id of the pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated pet object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewPet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pet updated",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "tags": ["pets"]
      },
      "delete": {
        "operationId": "deletePet",
        "summary": "Delete a pet",
        "description": "Delete a pet by ID",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "The id of the pet to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Pet deleted"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "tags": ["pets"]
      }
    },
    "/pets/search": {
      "post": {
        "operationId": "searchPets",
        "summary": "Search for pets",
        "description": "Search for pets using various criteria",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Search criteria",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid search criteria"
          }
        },
        "tags": ["pets", "search"]
      }
    }
  },
  "definitions": {
    "Pet": {
      "type": "object",
      "required": ["id", "name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "Unique identifier for the pet",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the pet",
          "example": "Buddy"
        },
        "tag": {
          "type": "string",
          "description": "Tag to categorize the pet",
          "example": "dog"
        },
        "age": {
          "type": "integer",
          "description": "Age of the pet in years",
          "example": 3
        }
      }
    },
    "NewPet": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the pet",
          "example": "Buddy"
        },
        "tag": {
          "type": "string",
          "description": "Tag to categorize the pet",
          "example": "dog"
        },
        "age": {
          "type": "integer",
          "description": "Age of the pet in years",
          "example": 3
        }
      }
    },
    "SearchCriteria": {
      "type": "object",
      "description": "Criteria for searching pets",
      "properties": {
        "name": {
          "type": "string",
          "description": "Pet name to search for (partial match)",
          "example": "Bud"
        },
        "tag": {
          "type": "string",
          "description": "Tag to filter by",
          "example": "dog"
        },
        "minAge": {
          "type": "integer",
          "description": "Minimum age",
          "example": 2
        },
        "maxAge": {
          "type": "integer",
          "description": "Maximum age",
          "example": 5
        }
      }
    }
  },
  "tags": [
    {
      "name": "pets",
      "description": "Everything about pets"
    },
    {
      "name": "search",
      "description": "Search operations"
    }
  ]
}
